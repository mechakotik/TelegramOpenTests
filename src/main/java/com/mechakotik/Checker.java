package com.mechakotik;

import org.checkerframework.checker.units.qual.C;

import java.io.FileReader;
import java.util.*;

public class Checker {
    public int getNumTests() {
        return 10;
    }

    int[][] cost, answer;
    int n, m, k, s;
    long jurySum;

    public class CheckResult {
        String verdict;
        double score;
    }

    public CheckResult check(String path, int testNumber) throws Exception {
        readInput(testNumber);
        if(!readOutput(path)) {
            CheckResult result = new CheckResult();
            result.verdict = "PE";
            result.score = 0;
            return result;
        }
        if(!answerCorrect()) {
            CheckResult result = new CheckResult();
            result.verdict = "WA";
            result.score = 0;
            return result;
        }
        long sum = 0L;
        for(int i = 0; i < n; i ++) {
            for(int j = 0; j < m; j ++) {
                if(answer[i][j] != 0) {
                    sum += cost[i][j];
                }
            }
        }
        CheckResult result = new CheckResult();
        result.verdict = "OK";
        result.score = Math.min(10, 10 * ((double)sum / jurySum) * ((double)sum / jurySum));
        return result;
    }

    private void readInput(int testNumber) throws Exception {
        FileReader fileReader = new FileReader("input/input" + (testNumber + 1) + ".txt");
        Scanner scanner = new Scanner(fileReader);
        n = scanner.nextInt();
        n = scanner.nextInt();
        m = scanner.nextInt();
        k = scanner.nextInt();
        s = scanner.nextInt();
        cost = new int[n][m];
        for(int i = 0; i < n; i ++) {
            for(int j = 0; j < m; j ++) {
                cost[i][j] = scanner.nextInt();
            }
        }
        jurySum = scanner.nextLong();
        fileReader.close();
    }

    private boolean readOutput(String path) throws Exception {
        FileReader fileReader = new FileReader(path);
        Scanner scanner = new Scanner(fileReader);
        answer = new int[n][m];
        for(int i = 0; i < n; i ++) {
            for(int j = 0; j < m; j ++) {
                if(!scanner.hasNextInt()) {
                    return false;
                }
                answer[i][j] = scanner.nextInt();
            }
        }
        fileReader.close();
        return true;
    }

    private boolean answerCorrect() throws Exception {
        int[] count = new int[k];
        for(int i = 0; i < n; i ++) {
            for(int j = 0; j < m; j ++) {
                if(answer[i][j] == 0) {
                    continue;
                }
                if(answer[i][j] < 0 || answer[i][j] > k) {
                    return false;
                }
                count[answer[i][j] - 1] ++;
            }
        }
        for(int i = 0; i < k; i ++) {
            if(!(1 <= count[i] && count[i] <= s)) {
                return false;
            }
        }

        ArrayDeque<Integer> xDeque = new ArrayDeque<>();
        ArrayDeque<Integer> yDeque = new ArrayDeque<>();
        boolean[][] used = new boolean[n][m];
        boolean[] groupPushed = new boolean[k];
        for(int i = 0; i < n; i ++) {
            for(int j = 0; j < m; j ++) {
                if(answer[i][j] == 0 || groupPushed[answer[i][j] - 1]) {
                    continue;
                }
                groupPushed[answer[i][j] - 1] = true;
                used[i][j] = true;
                xDeque.addLast(i);
                yDeque.addLast(j);
            }
        }

        int[] deltaX = {1, -1, 0, 0};
        int[] deltaY = {0, 0, 1, -1};
        while(!xDeque.isEmpty()) {
            int x = xDeque.pollFirst(), y = yDeque.pollFirst();
            for(int i = 0; i < 4; i ++) {
                int dx = x + deltaX[i];
                int dy = y + deltaY[i];
                if(0 <= dx && dx < n && 0 <= dy && dy < m && !used[dx][dy] && answer[dx][dy] == answer[x][y]) {
                    used[dx][dy] = true;
                    xDeque.addFirst(dx);
                    yDeque.addFirst(dy);
                }
            }
        }

        for(int i = 0; i < n; i ++) {
            for(int j = 0; j < m; j ++) {
                if(answer[i][j] != 0 && !used[i][j]) {
                    return false;
                }
            }
        }
        return true;
    }
}
