package com.mechakotik.TelegramOpenTests;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Document;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;

import java.io.*;
import java.util.*;

public abstract class OpenTestsBot extends TelegramLongPollingBot {
    public abstract int getNumTests();

    public abstract String getStatementURL();

    public abstract String getTestsURL();

    public static class CheckResult {
        String verdict;
        double score;

        public CheckResult(String verdict, double score) {
            this.verdict = verdict;
            this.score = score;
        }
    }

    public abstract CheckResult checkSolution(String outputPath, int testNumber) throws Exception;

    public void onUpdateReceived(Update update) {
        try {
            handleUpdate(update);
        } catch (Exception e) {
            System.out.println("Exception thrown: " + e);
        }
    }

    UserManager users;
    HashSet<String> fileIdSet = new HashSet<>();
    int lastMessageId = 0;

    public OpenTestsBot() throws Exception {
        users = new UserManager(getNumTests());
        users.loadFromFile();
    }

    HashSet<Long> registeringSet = new HashSet<>();

    private boolean isCorrectName(String name) {
        if(!(2 <= name.length() && name.length() <= 12)) {
            return false;
        }
        for(char i : name.toCharArray()) {
            if(i == ' ') {
                return false;
            }
        }
        return true;
    }

    private void handleUpdate(Update update) throws Exception {
        var message = update.getMessage();
        var user = message.getFrom();
        var id = user.getId();

        switch(users.getUserState(id)) {
            case UNREGISTERED:
                sendText(id, "Введите ник (от 2 до 12 символов, без пробелов)");
                users.setUserState(id, UserState.ENTERING_NAME);
                break;

            case ENTERING_NAME:
                if(message.hasText() && isCorrectName(message.getText())) {
                    users.setUserName(id, message.getText());
                    users.setUserState(id, UserState.DEFAULT);
                    sendHelp(id);
                }
                else {
                    sendText(id, "Введите ник (от 2 до 12 символов, без пробелов)");
                }
                break;

            case DEFAULT:
                lastMessageId = message.getMessageId();
                if(message.hasDocument()) {
                    processFile(id, message.getDocument());
                }
                else {
                    processCommand(id, message.getText());
                }
                break;
        }

        saveUsersList();
    }

    private void processCommand(Long id, String command) throws Exception {
        switch(command) {
            case "/help":
                sendHelp(id);
                break;
            case "/standings":
                sendStandings(id);
                break;
            case "/score":
                sendScore(id);
                break;
            default:
                sendText(id, "Неизвестная команда");
        }
    }

    private void processFile(Long id, Document document) throws Exception {
        var fileUniqueId = document.getFileUniqueId();
        if(fileIdSet.contains(fileUniqueId)) {
            sendReply(id, "Вы уже посылали этот файл");
            return;
        }
        fileIdSet.add(fileUniqueId);
        if(document.getFileSize() > 2e7) {
            sendReply(id, "Размер файла не должен превышать 20 Мб");
            return;
        }
        var fileId = document.getFileId();
        GetFile gf = new GetFile();
        gf.setFileId(fileId);
        String filePath = execute(gf).getFilePath();
        File file = downloadFile(filePath);
        checkOutputFile(file.getPath(), document.getFileName(), id);
    }

    private void sendText(Long id, String text) throws Exception {
        SendMessage sm = SendMessage.builder().chatId(id.toString()).text(text).parseMode("HTML").build();
        execute(sm);
    }

    private void sendReply(Long id, String text) throws Exception {
        SendMessage sm = SendMessage.builder().chatId(id.toString()).text(text).replyToMessageId(lastMessageId).parseMode("HTML").build();
        execute(sm);
    }

    private void sendStandings(Long userId) throws Exception {
        StandingsElement[] standings = users.getStandings();
        String message = "<code>";
        for(int i = 0; i < standings.length; i ++) {
            message += (i + 1) + ". ";
            if(i + 1 <= 9) {
                message += " ";
            }
            message += standings[i].name;
            for(int j = 0; j < 16 - standings[i].name.length(); j ++) {
                message += " ";
            }
            message += String.format(Locale.ROOT, "%.3f", standings[i].score) + "\n";
        }
        message += "</code>";
        sendText(userId, message);
    }

    private void sendScore(Long userId) throws Exception {
        String message = "<code>";
        double scoreSum = 0;
        for(int i = 0; i < getNumTests(); i ++) {
            message += (i + 1);
            message += ": ";
            if(i + 1 <= 9) {
                message += " ";
            }
            double score = users.getTestScore(userId, i);
            scoreSum += score;
            message += String.format(Locale.ROOT, "%.3f", score);
            message += "\n";
        }
        message += "\nΣ:  " + String.format(Locale.ROOT, "%.3f", scoreSum);
        message += "</code>";
        sendText(userId, message);
    }

    private void checkOutputFile(String path, String filename, Long userId) throws Exception {
        Integer testNumber = getNumTests();
        while(testNumber >= 1 && !filename.contains(testNumber.toString())) {
            testNumber -= 1;
        }
        if(testNumber == 0) {
            sendReply(userId, "Имя выходного файла должно содержать номер теста. Например, output1.txt");
            return;
        }
        testNumber --;

        CheckResult result;
        try {
            result = checkSolution(path, testNumber);
        }
        catch(Exception e) {
            System.out.println("Checker error: " + e);
            result = new CheckResult("Crash", 0);
        }

        users.updateTestScore(userId, testNumber, result.score);
        String message = "Вердикт: " + result.verdict +
                         "\nБаллы за тест: " + String.format(Locale.ROOT, "%.3f", result.score);
        sendReply(userId, message);
    }

    private void sendHelp(Long id) throws Exception {
        String text = "<a href=" + '"' + getStatementURL() + '"' + ">Условие</a>\n";
        text += "<a href=" + '"' + getTestsURL() + '"' + ">Архив с тестами</a>\n";
        text += "\nСписок команд:\n";
        text += "/help - условие, список команд\n";
        text += "/score - баллы по всем тестам\n";
        text += "/standings - таблица";
        sendText(id, text);
    }

    long lastTime = 0L;

    private void saveUsersList() throws Exception {
        Date date = new Date();
        long currentTime = date.getTime();
        if(currentTime / 300000 != lastTime / 300000) {
            users.saveToFile();
        }
    }
}
