package com.mechakotik.TelegramOpenTests;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.*;

public class UserManager {
    private static class User {
        UserState state = UserState.UNREGISTERED;
        String name = "";
        double[] scores;

        public User(int numTests) {
            scores = new double[numTests];
        }

        double getScoreSum() {
            double sum = 0;
            for(int i = 0; i < scores.length; i ++) {
                sum += scores[i];
            }
            return sum;
        }
    }

    enum UserState {
        UNREGISTERED,
        ENTERING_NAME,
        DEFAULT
    }

    public static class StandingsElement {
        String name;
        double score;
    }

    int numTests;

    UserManager(int numTests) {
        this.numTests = numTests;
    }

    HashMap<Long, User> map = new HashMap<>();

    public void loadFromFile() throws Exception {
        FileReader reader = null;
        try {
            reader = new FileReader("users.txt");
        }
        catch (FileNotFoundException e) {
            return;
        }
        Scanner scanner = new Scanner(reader).useLocale(Locale.US);
        while(scanner.hasNextLong()) {
            Long id = scanner.nextLong();
            User participant = new User(numTests);
            participant.state = UserState.DEFAULT;
            participant.name = scanner.next();
            for(int i = 0; i < numTests; i ++) {
                participant.scores[i] = scanner.nextFloat();
            }
            map.put(id, participant);
        }
        reader.close();
    }

    public void saveToFile() throws Exception {
        FileWriter writer = new FileWriter("users.txt");
        for(Map.Entry<Long, User> entry : map.entrySet()) {
            if(entry.getValue().state != UserState.DEFAULT) {
                continue;
            }
            writer.write(entry.getKey() + " ");
            writer.write(entry.getValue().name + " ");
            for(int i = 0; i < numTests; i ++) {
                writer.write(entry.getValue().scores[i] + " ");
            }
            writer.write("\n");
        }
        writer.close();
    }

    public boolean isCorrectName(String name) {
        if(!(2 <= name.length() && name.length() <= 12)) {
            return false;
        }
        for(char i : name.toCharArray()) {
            if(i == ' ') {
                return false;
            }
        }
        return true;
    }

    public UserState getUserState(Long id) {
        if(!map.containsKey(id)) {
            map.put(id, new User(numTests));
        }
        return map.get(id).state;
    }

    public void setUserState(Long id, UserState state) {
        putUser(id);
        map.get(id).state = state;
    }

    public void setUserName(Long id, String name) {
        putUser(id);
        map.get(id).name = name;
    }

    public double getTestScore(Long id, int test) {
        putUser(id);
        return map.get(id).scores[test];
    }

    public void updateTestScore(Long id, int test, double score) {
        putUser(id);
        map.get(id).scores[test] = Math.max(map.get(id).scores[test], score);
    }

    public StandingsElement[] getStandings() {
        StandingsElement[] standings = new StandingsElement[map.size()]; {
            int position = 0;
            for(Map.Entry<Long, User> i : map.entrySet()) {
                standings[position] = new StandingsElement();
                standings[position].name = i.getValue().name;
                standings[position].score = i.getValue().getScoreSum();
                position ++;
            }
        }
        Arrays.sort(standings, new Comparator<StandingsElement>() {
            @Override
            public int compare(StandingsElement o1, StandingsElement o2) {
                if(o1.score > o2.score) {
                    return -1;
                }
                if(o1.score == o2.score) {
                    return 0;
                }
                return 1;
            }
        });
        return standings;
    }

    private void putUser(Long id) {
        if(!map.containsKey(id)) {
            map.put(id, new User(numTests));
        }
    }
}
