package com.mechakotik.TelegramOpenTests;

import org.checkerframework.checker.units.qual.C;

import java.io.FileReader;
import java.util.Scanner;

public class MultiplyCrosswordBot extends OpenTestsBot {
    public MultiplyCrosswordBot() throws Exception {
        super();
    }

    @Override
    public String getBotUsername() {
        return null;
    }

    @Override
    public String getBotToken() {
        return null;
    }

    @Override
    public int getNumTests() {
        return 10;
    }

    @Override
    public String getStatementURL() {
        return null;
    }

    @Override
    public String getTestsURL() {
        return null;
    }

    static class CrosswordPart {
        int d, x, y, l;
        long p;
    }

    int n, m, k, juryScore;
    CrosswordPart[] crossword;

    @Override
    public CheckResult checkSolution(String outputPath, int testNumber) throws Exception {
        readInput(testNumber);
        if(!readOutput(outputPath)) {
            return new CheckResult("PE", 0);
        }
        if(!isSolutionCorrect()) {
            return new CheckResult("WA", 0);
        }
        double relativeScore = 5 + Math.min(5, 5 * Math.pow((double)getSolutionScore() / juryScore, 2));
        return new CheckResult("OK", relativeScore);
    }

    private void readInput(int testNumber) throws Exception {
        FileReader reader = new FileReader("data/multiply_crossword/input" + testNumber + ".txt");
        Scanner scanner = new Scanner(reader);
        n = scanner.nextInt();
        m = scanner.nextInt();
        k = scanner.nextInt();
        crossword = new CrosswordPart[k];
        for(int i = 0; i < k; i ++) {
            crossword[i] = new CrosswordPart();
            crossword[i].d = scanner.nextInt() - 1;
            crossword[i].x = scanner.nextInt() - 1;
            crossword[i].y = scanner.nextInt() - 1;
            crossword[i].l = scanner.nextInt();
            crossword[i].p = scanner.nextLong();
        }
        juryScore = scanner.nextInt();
    }

    long[][] solution;

    private boolean readOutput(String outputPath) throws Exception {
        FileReader reader = new FileReader(outputPath);
        Scanner scanner = new Scanner(reader);
        solution = new long[n][m];
        for(int i = 0; i < n; i ++) {
            for(int j = 0; j < m; j ++) {
                if(!scanner.hasNextInt()) {
                    return false;
                }
                solution[i][j] = scanner.nextInt();
            }
        }
        return true;
    }

    private boolean isSolutionCorrect() {
        for(int i = 0; i < n; i ++) {
            for(int j = 0; j < m; j ++) {
                if(!(0 <= solution[i][j] && solution[i][j] <= 1e18)) {
                    return false;
                }
            }
        }

        boolean[][] used = new boolean[n][m];
        for(int i = 0; i < k; i ++) {
            int x = crossword[i].x, y = crossword[i].y;
            long p = 1;
            for (int j = 0; j < crossword[i].l; j++) {
                p *= solution[x][y];
                used[x][y] = true;
                if (crossword[i].d == 0) {
                    y++;
                } else {
                    x++;
                }
            }
            if (p != crossword[i].p) {
                return false;
            }
        }

        for(int i = 0; i < n; i ++) {
            for(int j = 0; j < m; j ++) {
                if(!used[i][j] && solution[i][j] != 0) {
                    return false;
                }
            }
        }

        return true;
    }

    private int getSolutionScore() {
        int score = 0;
        for(int i = 0; i < n; i ++) {
            for(int j = 0; j < m; j ++) {
                if(solution[i][j] >= 2) {
                    score ++;
                }
            }
        }
        return score;
    }
}
